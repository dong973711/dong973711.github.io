<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JDBC的初次使用</title>
      <link href="/2018/11/28/JDBC%E7%9A%84%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/28/JDBC%E7%9A%84%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>自学了很久的java se基础，一直也没去尝试连接数据库，今天刚好在网上看到了一段JDBC的简介的，就照着大概连了一下数据库看看</strong><br>1.首先用<strong>MySQL</strong>创建了一个<strong>jdbc_db</strong>:<br><img src="/img/jdbc_db.png" alt="jdbc_db"><br>2.然后建一个UserTbl表，并加入数据：<br><img src="/img/jdbc_db_UserTbl.png" alt="UserTbl表"><br>3.接下来导入jDBC驱动，其实也就是导入JDBC的jar包，可以从这里下载<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">jdbc的jar包下载</a><br>4.解压后把这个jar包导入到eclipse中，既先先复制到eclipse中新建的lib文件夹下，然后选中右击Bulid Path<br><img src="/img/jdbcdaoru.png" alt=""><br>5.首先创建一个连接数据库的工具类<br>6.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.cumt.JDBC;</span><br><span class="line"></span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Connection;</span><br><span class="line"></span><br><span class="line">public class DBUtil &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">DBUtil util = new DBUtil();</span><br><span class="line">Connection conn = util.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">public Connection getConnection() &#123;</span><br><span class="line">    //连接数据库的操作</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">return (Connection) DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jdbc_db&quot;, &quot;root&quot;, &quot;自己数据库的密码&quot;);</span><br><span class="line">&#125; catch (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">public void closeConnection(Connection conn) &#123;</span><br><span class="line">    //关闭数据库的操作</span><br><span class="line">if(conn!=null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;数据库要关闭了&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/img/Sqlsuccess.png" alt="连接成功"><br>7.然后新建一个测试操作类Tester:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.cumt.JDBC;</span><br><span class="line"></span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Connection;</span><br><span class="line"></span><br><span class="line">public class Tester &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Tester test = new Tester();</span><br><span class="line">test.list();</span><br><span class="line">DBUtil util = new DBUtil();</span><br><span class="line">Connection conn = util.getConnection();</span><br><span class="line">util.closeConnection(conn);</span><br><span class="line">&#125;</span><br><span class="line">public void list() &#123;</span><br><span class="line">    //操作数据库，把数据库内容导出到eclipse</span><br><span class="line">DBUtil util = new DBUtil();</span><br><span class="line">Connection conn = util.getConnection();</span><br><span class="line">String sql = &quot;select id,username,password from UserTbl&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">while(rs.next()) &#123;</span><br><span class="line">int id = rs.getInt(&quot;id&quot;);</span><br><span class="line">String username = rs.getString(&quot;username&quot;);</span><br><span class="line">String password = rs.getString(&quot;password&quot;);</span><br><span class="line">System.out.println(&quot;id&quot;+id+&quot;---&gt;&quot;+&quot;username&quot;+&quot;---&gt;&quot;+username+&quot;---&gt;&quot;+&quot;password&quot;+&quot;---&gt;&quot;+password);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/img/Caozuosuccess.png" alt="操作成功截图"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer10之时间效率2</title>
      <link href="/2018/11/26/%E5%89%91%E6%8C%87Offer10%E4%B9%8B%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%872/"/>
      <url>/2018/11/26/%E5%89%91%E6%8C%87Offer10%E4%B9%8B%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%872/</url>
      <content type="html"><![CDATA[<h1 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h1><p><strong>题目描述：</strong>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int FindGreatestSumOfSubArray(vector&lt;int&gt; array) &#123;</span><br><span class="line">        int sum = array[0];</span><br><span class="line">        int max1 = array[0];</span><br><span class="line">        for(int i=1;i&lt;array.size();i++)&#123;</span><br><span class="line">            sum=max(array[i],array[i]+sum);</span><br><span class="line">            max1 = max(sum,max1);</span><br><span class="line">        &#125;</span><br><span class="line">        return max1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="整数中1出现的次数（从1到n整数中1出现的次数）"><a href="#整数中1出现的次数（从1到n整数中1出现的次数）" class="headerlink" title="整数中1出现的次数（从1到n整数中1出现的次数）"></a>整数中1出现的次数（从1到n整数中1出现的次数）</h1><p><strong>题目描述：</strong>求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int NumberOf1Between1AndN_Solution(int n)</span><br><span class="line">    &#123;</span><br><span class="line">        int count=0;//赋初值很重要啊啊啊啊</span><br><span class="line">        int chu=0,yu=0;</span><br><span class="line">        while(n)&#123;</span><br><span class="line">            chu=n;</span><br><span class="line">            while(chu/10!=0)&#123;</span><br><span class="line">                yu = chu%10;</span><br><span class="line">                if(yu == 1)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                chu = chu/10;</span><br><span class="line">            &#125;</span><br><span class="line">            if(chu == 1)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer9之字符串的排列和把数组排成最小数</title>
      <link href="/2018/11/25/%E5%89%91%E6%8C%87Offer9%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E5%92%8C%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0/"/>
      <url>/2018/11/25/%E5%89%91%E6%8C%87Offer9%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97%E5%92%8C%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="把数组排成最小数"><a href="#把数组排成最小数" class="headerlink" title="把数组排成最小数"></a>把数组排成最小数</h1><p><strong>题目描述：</strong>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。<br><strong>分析：</strong>数组中所有的数拼接后有可能会超过整数的范围，因此本题必须要使用字符串来处理。<br>要对3，32 ，321 排序，不能直接比较32，3的大小，应该比较323，332的大小，即，3，32的大小应该有323，332的大小来确定。因此3比32大，3应该在32后面，32和321比较时，32321&gt;32132,因此32&gt;321,32在321后面，3，32，321由小到大排序为，321，32，3，组成的最小数为：321323<br>这个过程就是需要两两结合比较哪种结合方式得到的数更小（冒泡排序，排序规则自己规定）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string PrintMinNumber(vector&lt;int&gt; numbers) &#123;</span><br><span class="line">        string shu;</span><br><span class="line">        int len = numbers.size();</span><br><span class="line">        if(len == 0)&#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(numbers.begin(),numbers.end(),cmp);</span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            shu+=to_string(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return shu;</span><br><span class="line">    &#125;</span><br><span class="line">    static bool cmp(int a,int b)&#123;</span><br><span class="line">        string A = to_string(a)+to_string(b);</span><br><span class="line">        string B = to_string(b)+to_string(a);</span><br><span class="line">        return A&lt;B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong>1.C++中也有to_string函数调用，包含文件为<string>。<br>2.Sort函数包含在头文件为#include<algorithm>的c++标准库中，调用标准库里的排序方法可以不必知道其内部是如何实现的，只要出现我们想要的结果即可!</algorithm></string></p><p>Sort函数有三个参数:</p><p>(1)第一个是要排序的数组的起始地址。</p><p>(2)第二个是结束的地址(最后一位要排序的地址的下一地址)</p><p>(3)第三个参数是排序的方法，可以是从大到小也可是从小到大，还可以不写第三个参数，此时默认的排序方法是从小到大排序。<br>若是要求从打到小排列，重写compare函数如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool compare(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">return a&gt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h1><p><strong>题目描述：</strong>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。<br><strong>分析：</strong>在STL中，除了next_permutation外，还有一个函数prev_permutation，两者都是用来计算排列组合的函数。前者是求出下一个排列组合，而后者是求出上一个排列组合。所谓“下一个”和“上一个”，书中举了一个简单的例子：<strong>对序列 {a, b, c}，每一个元素都比后面的小，按照字典序列，固定a之后，a比bc都小，c比b大，它的下一个序列即为{a, c, b}，而{a, c, b}的上一个序列即为{a, b, c}，同理可以推出所有的六个序列为：{a, b, c}、{a, c, b}、{b, a, c}、{b, c, a}、{c, a, b}、{c, b, a}，其中{a, b, c}没有上一个元素，{c, b, a}没有下一个元素。</strong><br>所以这个例子就可以用next_permutation函数来解决（前提是先要排好序）<br>这是一个c++函数，包含在头文件<algorithm>里面，下面是基本格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 int a[n];</span><br><span class="line">2 sort(a,a+n);</span><br><span class="line">3 do&#123;</span><br><span class="line">4   //操作</span><br><span class="line">5 &#125;while(next_permutation(a,a+n));</span><br></pre></td></tr></table></figure></algorithm></p><p><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; Permutation(string str) &#123;</span><br><span class="line">        vector&lt;string&gt; b;</span><br><span class="line">        int len = str.length();</span><br><span class="line">        if(len==0)&#123;</span><br><span class="line">            return b;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(str.begin(),str.end());</span><br><span class="line">        do&#123;</span><br><span class="line">            b.push_back(str.substr(0,len));</span><br><span class="line">        &#125;while (next_permutation(str.begin(), str.end()));</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer8之时间效率</title>
      <link href="/2018/11/13/%E5%89%91%E6%8C%87Offer8%E4%B9%8B%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%87/"/>
      <url>/2018/11/13/%E5%89%91%E6%8C%87Offer8%E4%B9%8B%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%87/</url>
      <content type="html"><![CDATA[<p><del>2018\11\26 删了一段话，真的是有点丧丧丧。。。。</del></p><hr><h1 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h1><p><strong>题目描述：</strong>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int MoreThanHalfNum_Solution(vector&lt;int&gt; numbers) &#123;</span><br><span class="line">        int len = numbers.size();</span><br><span class="line">        if(len&lt;=0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(len==1)&#123;</span><br><span class="line">            return numbers[0];</span><br><span class="line">        &#125;</span><br><span class="line">        int count=1,max=1,flag;</span><br><span class="line">        sort(numbers.begin(),numbers.end());</span><br><span class="line">        for(int i=1;i&lt;len;i++)&#123;</span><br><span class="line">            if(numbers[i]==numbers[i-1])&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(max&lt;count)&#123;</span><br><span class="line">                    flag=numbers[i-1];</span><br><span class="line">                    max=count;</span><br><span class="line">                &#125;</span><br><span class="line">                count=1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(max&gt;(len/2))&#123;</span><br><span class="line">            return flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a>最小的K个数</h1><p><strong>题目描述：</strong>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; GetLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123;</span><br><span class="line">        int len = input.size();</span><br><span class="line">        vector&lt;int&gt; jilu;</span><br><span class="line">        if(k&gt;len)&#123;</span><br><span class="line">            return jilu;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(input.begin(),input.end());</span><br><span class="line">        for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">            jilu.push_back(input[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return jilu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer7之鲁棒性</title>
      <link href="/2018/11/08/%E5%89%91%E6%8C%87Offer7%E4%B9%8B%E9%B2%81%E6%A3%92%E6%80%A7/"/>
      <url>/2018/11/08/%E5%89%91%E6%8C%87Offer7%E4%B9%8B%E9%B2%81%E6%A3%92%E6%80%A7/</url>
      <content type="html"><![CDATA[<p><strong>鲁棒性：</strong>其实鲁棒性是啥意识我还真不知道，查一下吧。<strong>鲁棒是Robust的音译，也就是健壮和强壮的意思。它是在异常和危险情况下系统生存的关键。比如说，计算机软件在输入错误、磁盘故障、网络过载或有意攻击情况下，能否不死机、不崩溃，就是该软件的鲁棒性。所谓”鲁棒性”，是指控制系统在一定(结构，大小)的参数摄动下，维持其它某些性能的特性。根据对性能的不同定义，可分为稳定鲁棒性和性能鲁棒性。以闭环系统的鲁棒性作为目标设计得到的固定控制器称为鲁棒控制器。</strong></p><h1 id="链表中的第K个节点"><a href="#链表中的第K个节点" class="headerlink" title="链表中的第K个节点"></a>链表中的第K个节点</h1><p><strong>题目描述：</strong>输入一个链表，输出该链表中倒数第k个结点。<br><strong>分析：</strong>链表不像数组，可以直接去第几个元素，链表是要通过头结点一个一个去查找的，但是题目要求要查找   <strong>倒数</strong> 第K个节点<br><img src="/img/链表倒数第K个.png" alt="思路图"><br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">struct ListNode &#123;</span><br><span class="line">int val;</span><br><span class="line">struct ListNode *next;</span><br><span class="line">ListNode(int x) :</span><br><span class="line">val(x), next(NULL) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) &#123;</span><br><span class="line">       ListNode* p = pListHead;</span><br><span class="line">        for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">            if(p==nullptr)&#123;</span><br><span class="line">                return nullptr;</span><br><span class="line">            &#125;</span><br><span class="line">            p= p-&gt;next;//移位k个</span><br><span class="line">        &#125;</span><br><span class="line">        while(p!=nullptr)&#123;</span><br><span class="line">            //两个节点同时移位，前面那个到尾部，则后面这个距离尾部为k，即倒数第K个</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            pListHead = pListHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return pListHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><strong>题目描述：</strong>输入一个链表，反转链表后，输出新链表的表头。<br><strong>分析：</strong>引入三个指针，利用转换，不断的让后一节点指向上一个节点<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">struct ListNode &#123;</span><br><span class="line">int val;</span><br><span class="line">struct ListNode *next;</span><br><span class="line">ListNode(int x) :</span><br><span class="line">val(x), next(NULL) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* ReverseList(ListNode* pHead) &#123;</span><br><span class="line">        if(pHead == nullptr||pHead-&gt;next == nullptr)&#123;</span><br><span class="line">            return pHead;//若为空链表或链表只有一个节点时</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        ListNode* q = p-&gt;next;</span><br><span class="line">        ListNode* r = q-&gt;next;</span><br><span class="line">        while(r!=nullptr)&#123;//转换节点间的指向关系</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;next = p;</span><br><span class="line">        pHead-&gt;next = nullptr;</span><br><span class="line">        return q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="合并两个排序链表"><a href="#合并两个排序链表" class="headerlink" title="合并两个排序链表"></a>合并两个排序链表</h1><p><strong>题目描述：</strong>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。<br><strong>分析：</strong>两个都是有序的，通过不断比较去连成一个新的链表<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">struct ListNode &#123;</span><br><span class="line">int val;</span><br><span class="line">struct ListNode *next;</span><br><span class="line">ListNode(int x) :</span><br><span class="line">val(x), next(NULL) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)</span><br><span class="line">    &#123;</span><br><span class="line">        ListNode* p1 = pHead1;</span><br><span class="line">        ListNode* p2 = pHead2;</span><br><span class="line">        ListNode* head = new ListNode(0);</span><br><span class="line">        ListNode* p_new = head;</span><br><span class="line">        while(p1&amp;&amp;p2)&#123;</span><br><span class="line">            if((p1-&gt;val) &lt;= (p2-&gt;val))&#123;</span><br><span class="line">                p_new-&gt;next = p1;</span><br><span class="line">                p_new = p_new-&gt;next;</span><br><span class="line">                p1 = p1-&gt;next;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                p_new-&gt;next = p2;</span><br><span class="line">                p_new = p_new-&gt;next;</span><br><span class="line">                p2 = p2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(p1==nullptr)&#123;</span><br><span class="line">            p_new-&gt;next = p2;</span><br><span class="line">        &#125;else if(p2==nullptr)&#123;</span><br><span class="line">            p_new-&gt;next = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        return head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong>在这里就是要特别去考虑一下空指针的情况，这几个题目钥匙用数组去实现的话就很简单了，但现在要用到链表，刚好可以把数据结构的内容复习一遍，数据结构当时链表的实现自己写了出来，但是到后面树 图那一部分就懵逼了，当时就是听热闹了。现在看到这里大多数就是关于树的题，但自己啥也不会，回头再开始学那部分内容吧。这只是自己的一个私人空间，别怂别怕，总会做完的，加油。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer6之代码的完整性</title>
      <link href="/2018/11/07/%E5%89%91%E6%8C%87Offer6%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7/"/>
      <url>/2018/11/07/%E5%89%91%E6%8C%87Offer6%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%8C%E6%95%B4%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h1><p><strong>题目描述：</strong>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。<br><strong>分析：</strong>既然是代码的完整性，肯定是我们会漏掉什么地方，在提交了一次后发现是我忘记分情况计算expoent为负数的情况了。<br><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double Power(double base, int exponent) &#123;</span><br><span class="line">       double count=1;</span><br><span class="line">        if(exponent&gt;=0)&#123;</span><br><span class="line">            for(int i=0;i&lt;exponent;i++)&#123;</span><br><span class="line">                count = count*base;</span><br><span class="line">            &#125;</span><br><span class="line">            return count;</span><br><span class="line">        &#125;else&#123;//为负数次方时的计算</span><br><span class="line">            for(int i=0;i&lt;(-exponent);i++)&#123;</span><br><span class="line">                count = count*base;</span><br><span class="line">            &#125;</span><br><span class="line">            count = 1/count;</span><br><span class="line">            return count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="调整数组顺序使奇数放在数组前面偶数放在数组后面"><a href="#调整数组顺序使奇数放在数组前面偶数放在数组后面" class="headerlink" title="调整数组顺序使奇数放在数组前面偶数放在数组后面"></a>调整数组顺序使奇数放在数组前面偶数放在数组后面</h1><p><strong>题目描述：</strong>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。<br><strong>分析：</strong>这个问题就是去依次判断每个数的奇偶，然后把奇数放一个数组，偶数放一个数组，然后合并。题目中用的还是vector<int>，那天已经看了它的一些用法，并做了一些总结。<a href="https://donghu123.top/2018/11/03/剑指Offer2之从头到尾打印链表/" target="_blank" rel="noopener">vector用法的一些总结</a>。在这个题目中，我们要合并两个数组，所以可以直接调用<strong>vec.insert(des.end(),src.begin(),src.end());<br>des.end()为要插入到的数组的尾指针，src.begin()为要插入数组的头指针，src.end()为要插入数组的尾指针</strong></int></p><p><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void reOrderArray(vector&lt;int&gt; &amp;array) &#123;</span><br><span class="line">         vector&lt;int&gt; a;</span><br><span class="line">        vector&lt;int&gt; b;</span><br><span class="line">        int len = array.size();</span><br><span class="line">        int a1=0,b1=0;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            if(array[i]%2 == 0)&#123;</span><br><span class="line">                a.push_back(array[i]);//存偶数</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                b.push_back(array[i]);//存奇数</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array=b;</span><br><span class="line">        //b数组是开头，所以先把b赋值给array</span><br><span class="line">        array.insert(array.end(),a.begin(),a.end());//然后把a拼接到array后面</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong>以后第一题这样的题，要注意考虑到所有的情况。第二题也就算是复习了一般vector的用法吧。</p><hr><p><del>本来想写点什么，但就像给喜欢的女生发消息一样，欲言又止，写了一大堆又删了。算了算了，不写了，头疼。多少信点玄学，还是不随便写的好</del></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer5之位运算</title>
      <link href="/2018/11/06/%E5%89%91%E6%8C%87Offer5%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2018/11/06/%E5%89%91%E6%8C%87Offer5%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p><strong>题目描述：</strong>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。<br><strong>：</strong>这个题目要求负数用补码表示，我就很懵逼了，难道还要去判断正负数，然后负数求补码来运算吗。只能求助百度了，在网上找到了这题的三种解法，现在我来总结一下。</p><h5 id="最优位操作"><a href="#最优位操作" class="headerlink" title="最优位操作:"></a>最优位操作:</h5><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>比如：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">     int  NumberOf1(int n) &#123;</span><br><span class="line">         int count=0;</span><br><span class="line">         if(n==0)&#123;</span><br><span class="line">             return 0;</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">             while(n!=0)&#123;</span><br><span class="line">                 count++;</span><br><span class="line">                 n = (n-1)&amp;n;</span><br><span class="line">             &#125;</span><br><span class="line">             return count;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="位运算法："><a href="#位运算法：" class="headerlink" title="位运算法："></a>位运算法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">把数字当成二进制样式，依次判断其最后一位是否为一（判断一次，右移一位）</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int NumberOf1(int n)&#123;</span><br><span class="line">        int count = 0;</span><br><span class="line">        int flag = 1;</span><br><span class="line">        while(flag != 0)&#123;</span><br><span class="line">            if((n &amp; flag))&#123;</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = flag &lt;&lt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模除法："><a href="#模除法：" class="headerlink" title="模除法："></a>模除法：</h5><p>模除法就是常规做法，通过我们平时把十进制转化为二进制的方法，依次判断每一位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">int NumberOf1(unsigned int n)&#123;</span><br><span class="line">    int number = 0;   //数 1 的个数</span><br><span class="line"></span><br><span class="line">        while(n != 0)&#123;</span><br><span class="line">            if(n % 2 == 1)&#123;</span><br><span class="line">                number ++;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n / 2;</span><br><span class="line">        &#125;</span><br><span class="line">    return number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="问题：这求解过程中始终没有出现对负数的特别讨论。还是对补码理解不透彻，仅仅是停留在会求的层面，需要去深层次理解其意义"><a href="#问题：这求解过程中始终没有出现对负数的特别讨论。还是对补码理解不透彻，仅仅是停留在会求的层面，需要去深层次理解其意义" class="headerlink" title="问题：这求解过程中始终没有出现对负数的特别讨论。还是对补码理解不透彻，仅仅是停留在会求的层面，需要去深层次理解其意义"></a>问题：这求解过程中始终没有出现对负数的特别讨论。还是对补码理解不透彻，仅仅是停留在会求的层面，需要去深层次理解其意义</h2><p><strong>补码(two’s complement) 1、在计算机系统中，数值一律用补码来表示（存储）。 主要原因：使用补码，可以将符号位和其它位统一处理；同时，减法也可按加法来处理。另外，两个用补 码表示的数相加时，如果最高位（符号位）有进位，则进位被舍弃。 2、补码与原码的转换过程几乎是相同的。</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offerr4之递归和循环</title>
      <link href="/2018/11/05/%E5%89%91%E6%8C%87Offerr4%E4%B9%8B%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
      <url>/2018/11/05/%E5%89%91%E6%8C%87Offerr4%E4%B9%8B%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h1 id="斐波那契函数"><a href="#斐波那契函数" class="headerlink" title="斐波那契函数"></a>斐波那契函数</h1><ol><li><strong>题目描述：</strong>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n&lt;=39</li><li><strong>分析：</strong>这个题大学刚开始学C++的时候就见过，这个是有规律<strong>:n=0:0;  n=1:1; n=2:1; n=3:2; n=4:3; n=5:5;…..</strong>依次就是前两个数相加。</li><li><strong>代码：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int Fibonacci(int n) &#123;</span><br><span class="line">        int count=0,a=0,b=1;</span><br><span class="line">        if(n==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(n==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">                count = a;</span><br><span class="line">                a = b;</span><br><span class="line">                b = count+a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">递归：(虽然可以递归，但是递归的时间复杂度比较高)</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int Fibonacci(int n) &#123;</span><br><span class="line">        int count=0,a=0,b=1;</span><br><span class="line">        if(n==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(n==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return Fibonacci(n-1)+Fibonacci(n-2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="跳台阶："><a href="#跳台阶：" class="headerlink" title="跳台阶："></a>跳台阶：</h1><ol><li><strong>题目描述：</strong>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</li><li><strong>分析：</strong>这个题和斐波那契数列是一样的规律</li><li><strong>代码：</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">递归：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloor(int number) &#123;</span><br><span class="line">        int count=0,a=1,b=2;</span><br><span class="line">        if(number&lt;=2)&#123;</span><br><span class="line">            return number;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return jumpFloor(number-1)+jumpFloor(number-2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloor(int number) &#123;</span><br><span class="line">        int count=0,a=1,b=2;</span><br><span class="line">        if(number&lt;=2)&#123;</span><br><span class="line">            return number;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            for(int i=2;i&lt;number;i++)&#123;</span><br><span class="line">                count=b;</span><br><span class="line">                b=count+a;</span><br><span class="line">                a=count;</span><br><span class="line">            &#125;</span><br><span class="line">            return b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloor(int number) &#123;</span><br><span class="line">        int container[number],i;</span><br><span class="line">        container[0]=0;</span><br><span class="line">        container[1]=1;</span><br><span class="line">        container[2]=2;</span><br><span class="line">        for(int j=3;j&lt;=number;j++)&#123;</span><br><span class="line">        container[j] = container[j-1]+container[j-2];</span><br><span class="line">        &#125;</span><br><span class="line">        return container[number];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="变态跳台阶问题"><a href="#变态跳台阶问题" class="headerlink" title="变态跳台阶问题"></a>变态跳台阶问题</h1><ol><li><strong>题目描述：</strong>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</li><li><strong>分析：</strong></li></ol><ul><li>n=1，只有一种跳法</li><li>n=2，有两种跳法，一种是直接跳两节，一种是一节一节跳两次（目前来说是和上一题是一样的）</li><li>n=3,当第一下跳一节时，有f(3-1)种，当第一下跳两节时有f(3-2)种跳法，当地一下跳三节时只有一种跳法，所以总共有f(2)+f(1)+1种；</li><li>n=4，当第一下跳一节时，有f(4-1)种，当第一下跳两节时有f(4-2)种跳法，当第一下跳三节时有f(4-3)种跳法，当地一下跳四节时只有一种跳法，所以总共有f(3)+f(2)+f(1)+1种；</li><li>……..</li><li>n阶时，跳法有f(n-1)+f(n-2)+…+f(1)+1  = f(n);</li><li>n-1阶时，跳法有f(n-2)+f(n-3)+…+f(1)+1 = f(n-1);<br>两式相减：f(n) = 2*f(n-1)</li></ul><p><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">递归：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloorII(int number) &#123;</span><br><span class="line">        if(number&lt;=2)&#123;</span><br><span class="line">            return number;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">           return 2*jumpFloorII(number-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jumpFloorII(int number) &#123;</span><br><span class="line">        int container[number],i;</span><br><span class="line">        container[0]=0;</span><br><span class="line">        container[1]=1;</span><br><span class="line">        container[2]=2;</span><br><span class="line">       for(i=3;i&lt;=number;i++)&#123;</span><br><span class="line">            container[i]=2*container[i-1];</span><br><span class="line">       &#125;</span><br><span class="line">       return container[number];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="矩形覆盖："><a href="#矩形覆盖：" class="headerlink" title="矩形覆盖："></a>矩形覆盖：</h1><ol><li><strong>题目描述：</strong>我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</li><li><strong>代码：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int rectCover(int number) &#123;</span><br><span class="line">        if(number&lt;=2)&#123;</span><br><span class="line">            return number;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return rectCover(number-1)+rectCover(number-2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面几个问题都可以用递归解决，而且递归看起来代码更加简洁一点。但是递归是一个不断去往下计算的过程，中间会计算许多已经计算过的问题，这样下去增加了计算的时间负责度。<br>迭代迭代法也称辗转法，是一种不断用变量的旧值递推新值的过程,跟迭代法相对应的是直接法（或者称为一次解法），即一次性解决问题。<br>我们可以把计算出来的每一个值做个记录，然后在它需要的时候直接拿来用吗，这样就可以解决重复计算的问题。动态规划基本思想就是把待求问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer3之用两个栈实现队列、查找和排序</title>
      <link href="/2018/11/05/%E5%89%91%E6%8C%87Offer3%E4%B9%8B%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/11/05/%E5%89%91%E6%8C%87Offer3%E4%B9%8B%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p><strong>题目描述：</strong>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p><strong>分析：</strong>栈是先进后出，队列是先进先出。要让两个栈实现先进先出的顺序，则可以让一个栈专门做出（pop）操作,一个栈专门做（push）操作（当出栈的栈里面元素没有时，然后才把另一个栈内的元素放入那个负责pop的栈），这样就实现了先进先出的操作，即实现了队列。<br><img src="/img/twostacktoquene.png" alt="原理图"></p><p><strong>代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void push(int node) &#123;</span><br><span class="line">        stack2.push(node);            //让stack2为执行push操作，把元素放入stack2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int pop() &#123;</span><br><span class="line">        int value;</span><br><span class="line">        if(stack1.size()&gt;0)&#123;          //若stack1不为空，则执行出栈</span><br><span class="line">            value = stack1.top();</span><br><span class="line">            stack1.pop();</span><br><span class="line">        &#125;else if(stack2.size()&gt;0)&#123;    //stack1为空，</span><br><span class="line">            while(stack2.size()&gt;0)&#123;   //若stack2不为为空，则把Stack2的元素放入stack1</span><br><span class="line">                value = stack2.top();</span><br><span class="line">                stack1.push(value);</span><br><span class="line">                stack2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            if(stack1.size()&gt;0)&#123;      //放入stack1后继续从stack1执行pop操作</span><br><span class="line">                value = stack1.top();</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return value;//返回stack1栈顶的值，既队列队首的值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    stack&lt;int&gt; stack1;</span><br><span class="line">    stack&lt;int&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h1><p><strong>题目描述：</strong>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><strong>分析：</strong>这个问题比较简单了，依次检测，只要发现出现了递减的情况，变返回这个数字就可以。若遍历了一遍数组还是没有发现这种情况，则说明没有出现这种旋转情况，则输出第一个元素好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minNumberInRotateArray(vector&lt;int&gt; rotateArray) &#123;</span><br><span class="line">        if(rotateArray.size()==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            int len = rotateArray.size();</span><br><span class="line">            for(int i=1;i&lt;len;i++)&#123;</span><br><span class="line">                if(rotateArray[i]&lt;rotateArray[i-1])&#123;</span><br><span class="line">                    return rotateArray[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rotateArray[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong><br>关于栈与队列这个题目，虽然对栈与队列的认识又更深了一层，但是对他们的实际应用还是一点都没有，对他们的用法还有待去提高。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指Offer2之从头到尾打印链表</title>
      <link href="/2018/11/03/%E5%89%91%E6%8C%87Offer2%E4%B9%8B%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/11/03/%E5%89%91%E6%8C%87Offer2%E4%B9%8B%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><strong>题目描述：</strong>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。<br><strong>已给：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*  struct ListNode &#123;</span><br><span class="line">*        int val;</span><br><span class="line">*        struct ListNode *next;</span><br><span class="line">*        ListNode(int x) :</span><br><span class="line">*              val(x), next(NULL) &#123;</span><br><span class="line">*        &#125;</span><br><span class="line">*  &#125;;</span><br><span class="line">*/</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>第一眼感受：单链表，想起了数据结构的学的，那时候好像就只略微学会了链表这一节。可是再细看，这特么不按照常理出牌啊，vector<int>,只听过vector，但却一点也不了解啊，那就查吧。。。</int></p><p><a href="http://www.cnblogs.com/zhonghuasong/p/5975979.html" target="_blank" rel="noopener">C++ STL之vector用法总结</a>这个上面还是总结的很好的</p><p><strong>题解代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        vector&lt;int&gt; daoxu;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        while(p!=NULL)&#123;</span><br><span class="line">            daoxu.push_back(p-&gt;val);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(daoxu.begin(),daoxu.end());</span><br><span class="line">        return daoxu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong></p><ol><li>链表就是通过一个结构体把一个值与一个指针封装起来，通过指针一个接一个的连接起来就成为了链表，只有通过头指针才可以找到整个链表的内容。</li><li>std::nullptr 是C+ +空指针类型的关键字，nullptr是在C++11中引入的。</li><li>vector是表示可变大小数组的序列容器，不像数组，它的大小是可以动态改变的。</li><li>vector基本操作</li></ol><ul><li>向量大小： vec.size();</li><li>向量最大容量： vec.max_size();</li><li>更改向量大小： vec.resize();</li><li>向量真实大小： vec.capacity();</li><li>向量判空： vec.empty();</li><li><strong>末尾添加元素： vec.push_back();</strong>         //本题用到</li><li>末尾删除元素： vec.pop_back();</li><li>任意位置插入元素： vec.insert();</li><li>任意位置删除元素： vec.erase();</li><li>交换两个向量的元素： vec.swap();</li><li>清空向量元素： vec.clear();</li><li>末尾指针：vec.end(); //指向最后一个元素的下一个位置</li><li>指向常量的开始指针： vec.cbegin(); //意思就是不能通过这个指针来修改所指的内容，但还是可以通过其他方式修改的，而且指针也是可以移动的。</li><li>指向常量的末尾指针： vec.cend();</li><li>下标访问： vec[1]; //并不会检查是否越界</li><li>at方法访问： vec.at(1); //以上两者的区别就是at会检查是否越界，是则抛出out of range异常</li><li>访问第一个元素： vec.front();</li><li>访问最后一个元素： vec.back();</li><li>返回一个指针： int* p = vec.data(); //可行的原因在于vector在内存中就是一个连续存储的数组，所以可以返回一个指针指向这个数组。这是是C++11的特性。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">遍历元素</span><br><span class="line">vector&lt;int&gt;::iterator it;</span><br><span class="line">for (it = vec.begin(); it != vec.end(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">//或者</span><br><span class="line">for (int i = 0; i &lt; vec.size(); i++) &#123;</span><br><span class="line">    cout &lt;&lt; vec.at(i) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">倒序，也就是本题用到的方法</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">reverse(vec.begin(), vec.end());</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">元素排序</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">sort(vec.begin(), vec.end()); //采用的是从小到大的排序</span><br><span class="line">//如果想从大到小排序，可以采用上面反转函数，也可以采用下面方法:</span><br><span class="line">bool Comp(const int&amp; a, const int&amp; b) &#123;</span><br><span class="line">    return a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">sort(vec.begin(), vec.end(), Comp);</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>剑指offer</title>
      <link href="/2018/11/01/%E5%89%91%E6%8C%87offer/"/>
      <url>/2018/11/01/%E5%89%91%E6%8C%87offer/</url>
      <content type="html"><![CDATA[<p><strong>好久没写了，自己也不知道做些什么！我也思考了很久，最珍贵的就是坚持，但是最难得的也就是坚持了。这个博客当时搭建好，由于派的任务，才写了几篇。现在也是感觉好迷茫，那天碰到一个找工作的学长，他说如果找工作就最好学习一点算法，现在正在自学Java，虽然也没什么进展，现在就借着这个博客，把剑指Offer的算法题做一遍，最少保证一周一题吧，然后同时也把Java学习着，等下学期再看要考研还是找工作。</strong></p><h1 id="二维数组总的查找："><a href="#二维数组总的查找：" class="headerlink" title="二维数组总的查找："></a>二维数组总的查找：</h1><p>题目描述：在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>注意要点，数组长度的求法，用C++和Java两种语言的求法：</strong>java用array.length;C++可以用size(array)/size(array[0]);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Java代码：</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public boolean Find(int target, int [][] array) &#123;</span><br><span class="line">        if(array.length==0||array[0].length==0)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int m=array.length-1;</span><br><span class="line">        int max=m;</span><br><span class="line">        int n=0;</span><br><span class="line">        int com = array[n][m];</span><br><span class="line">        while(target!=com)&#123;</span><br><span class="line">            if(n&lt;max&amp;&amp;m&gt;0)&#123;</span><br><span class="line">                if(target&gt;com)&#123;</span><br><span class="line">                    n++;</span><br><span class="line">                    com = array[n][m];</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    m--;</span><br><span class="line">                    com = array[n][m];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p><strong>题目描述：</strong>实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br><strong>注意字符与字符串：</strong>“a”属于字符串，’a’属于字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">C++代码:</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">void replaceSpace(char *str,int length) &#123;</span><br><span class="line">         int i=0;</span><br><span class="line">        while(str[i]!=&apos;\0&apos;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(str[i]==&apos; &apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j=length-1;j&gt;i;j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    str[j+2]=str[j];</span><br><span class="line">                &#125;</span><br><span class="line">                str[i+2]=&apos;0&apos;;</span><br><span class="line">                str[i+1]=&apos;2&apos;;</span><br><span class="line">                str[i]=&apos;%&apos;;</span><br><span class="line">                length+=2;</span><br><span class="line">                i=i+2;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>这两道题总体来说还是比较简单的，没有涉及算法，只是一些简单的逻辑问题，就是一题可以根据数组的分布规律来简化匹配target的过程，使复杂度降低。<br>自己的不足，还是对一些小细节处理不好，就是因为做题太少的原因吧，希望自己可以坚持做下去，哈哈，试试能坚持几天，自己等着看自己笑话</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>记自己关于webplus pro的main.html的第一次</title>
      <link href="/2018/06/15/%E5%85%B3%E4%BA%8Ewebplus-pro%E7%9A%84main-html%E7%9A%84%E7%BC%96%E5%86%99%E6%80%BB%E7%BB%93/"/>
      <url>/2018/06/15/%E5%85%B3%E4%BA%8Ewebplus-pro%E7%9A%84main-html%E7%9A%84%E7%BC%96%E5%86%99%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>突然发现离上次写博客已经大半个月了，好难过，没有做到规定时间内的总结。其实也还好吧，这东西，慢慢总结吧，日子总也是一天一天过的，想多了也没用。</p><h1 id="上期计划完成情况"><a href="#上期计划完成情况" class="headerlink" title="上期计划完成情况"></a>上期计划完成情况</h1><p>上次我说正在模仿写新浪页面，写了一半，发现还是有些地方自己还是没法实现，唉，连模仿写一个页面都写不出来，我滴心啊，拔凉拔凉？嗯，确实有那么点。这个先不说了。生气<br>JavaScript dom 编程艺术，这本书还确实是看了，对DOM的运用确实提高了些理解，现在还有两章内容还没学完，前面的知识点也在笔记本上做了总结，等看完整本书了再试着写一篇博客吧</p><h1 id="webplus-pro"><a href="#webplus-pro" class="headerlink" title="webplus pro"></a>webplus pro</h1><h2 id="突然一哈"><a href="#突然一哈" class="headerlink" title="突然一哈"></a>突然一哈</h2><p>这东西说来也很神奇，当时我们小组正在例会，当时大家正在低头写自己的东西，突然我们组长过来说让我试着写一个页面，当时有点兴奋也有点害怕，写不出来咋办。然后就打开了<a href="http://pro.webplus.net.cn/" target="_blank" rel="noopener">webplus Pro</a>，然后就进来了一个学长他说学工作处要做一主页，然后要我们前端组做一些任务，他突然就演示了一下webplus Pro的用法，好像要有啥权限，突然一下看到原来网页也可以这些做成，速度还这么快，大概给我讲了一下后，然后说让我做这么main.htm页面，这个是最容易一点的，说是赶星期三交给他，我们组长答应了，说不管我做不做出来，让我星期二给他，他完成剩下的。呼，一下就轻松了好多。</p><h3 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h3><p>这就是要的最后效果<br><img src="/img/xgc.png" alt="学工处"><br><strong><em>发现个问题，要切图，必须抽空学习一下ps了</em></strong></p><p>发现我真是个话痨。正题正题</p><p>其实主要用的东西还是前端之前写页面用的html css连js也没有用到，主要就是先做页面效果<br>唯一的特殊地方就是，网页中的那些正式内容是不用写的，只需要按规定格式写褚一阁框架就好了<br><strong>模板窗口</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div frag=<span class="string">"面板1"</span>&gt;</span><br><span class="line">    &lt;div frag=<span class="string">"窗口1"</span>&gt;</span><br><span class="line">       &lt;div frag=<span class="string">"窗口内容"</span>&gt;</span><br><span class="line">          窗口内容</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>这些frag=”面板x”，frag=”窗口x”，frag=”窗口内容”，都是webplus规定的，未来把内容很好地嵌套在模板里。特别注意几点：窗口名和面板名都不可以相互重复，防止识别错误。窗口内容那部分是要被完全覆盖的，所以不用给<div frag="窗口内容">添加任何样式，添加了也没用，在把内容加入后，正是效果里是啥也看不到了。</div></p><p>举个例子<br>原来的图：<img src="/img/xgc2.png" alt="样例"><br>做出的效果：<img src="/img/xgc1.png" alt="例子"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">样例代码（没有css代码部分）</span><br><span class="line"> &lt;div class=<span class="string">"bgbiaoti"</span>&gt;</span><br><span class="line">                            &lt;span class=<span class="string">"biaoti"</span>&gt;标题&lt;/span&gt;</span><br><span class="line">                            &lt;a href=<span class="string">"#"</span> class=<span class="string">"more"</span>&gt;&amp;gt&lt;/a&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=<span class="string">"pic scroll"</span> frag=<span class="string">"窗口01"</span>&gt;</span><br><span class="line">                            &lt;div frag=<span class="string">"窗口内容"</span>&gt;图片滚动区域&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class=<span class="string">"bgbiaoti"</span>&gt;</span><br><span class="line">                            &lt;span class=<span class="string">"biaoti"</span>&gt;标题&lt;/span&gt;</span><br><span class="line">                            &lt;a href=<span class="string">"#"</span> class=<span class="string">"more"</span>&gt;&amp;gt&lt;/a&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=<span class="string">"post1 post-04 mbox"</span> frag=<span class="string">"窗口04"</span>&gt;</span><br><span class="line">                            &lt;div class=<span class="string">"tt"</span>&gt;</span><br><span class="line">                                &lt;h3 class=<span class="string">"tit"</span>&gt;</span><br><span class="line">                                    &lt;span class=<span class="string">"title"</span> frag=<span class="string">"标题"</span>&gt;</span><br><span class="line">                                        &lt;span frag=<span class="string">"标题内容"</span>&gt;标题04&lt;/span&gt;</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/h3&gt;</span><br><span class="line">                                &lt;div class=<span class="string">"more_btn"</span> frag=<span class="string">"按钮"</span> <span class="built_in">type</span>=<span class="string">"更多"</span>&gt;</span><br><span class="line">                                    &lt;span class=<span class="string">"more_text"</span> frag=<span class="string">"按钮内容"</span>&gt;更多&amp;gt;&amp;gt;&lt;/span&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=<span class="string">"con"</span>&gt;</span><br><span class="line">                                &lt;div frag=<span class="string">"窗口内容"</span>&gt;</span><br><span class="line">                                    窗口内容</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>大概实现就是这样。</p><p>还有就是布局方面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">主体部分：</span><br><span class="line">&lt;div calss=<span class="string">"wrapper container"</span> id=<span class="string">"contanier"</span>&gt;</span><br><span class="line">   &lt;div class=<span class="string">"inner"</span>&gt;</span><br><span class="line">      &lt;div class=<span class="string">"mod clearfix"</span>&gt;</span><br><span class="line">        &lt;!--左列--&gt;</span><br><span class="line">        &lt;div class=<span class="string">"ml cleafix"</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">"modl"</span>&gt;</span><br><span class="line">               &lt;div class=<span class="string">"post mbox"</span>&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           &lt;div class=<span class="string">"modc"</span>&gt;&lt;/div&gt;</span><br><span class="line">           &lt;div class=<span class="string">"modr"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--中列--&gt;</span><br><span class="line">        &lt;div class=<span class="string">"mc"</span>&gt;</span><br><span class="line">        中间内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!--右列--&gt;</span><br><span class="line">        &lt;div class=<span class="string">"mr"</span>&gt;</span><br><span class="line">        右列内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>本来基础就不是很牢靠，再加上这次时间有点赶，还是第一次接触webplus，所以最后给我们组长时还有许多问题，最后还是他给我改了页面的效果布局，也是前天刚做完的，具体做了哪些代码的变动，我还没有找。其中页面布局定位时出现的最大的问题，问题还是因为命名重复，导致效果叠加，导致定位布局出现问题。</p><h4 id="下次"><a href="#下次" class="headerlink" title="下次"></a>下次</h4><p>1.之前一直都是用一些标签写一些简单的页面，而且内容不多，css布局部分涉及的命名也很少，不用考虑那么多相互之间的影响，但以后再写的时候一定要特别注意命名，注意各部分内容之间的影响。<br>2.用webplus做页面，其中main.html大概就是最简单的部分了，剩下的会在后期学习<br>3.学完javascriopt dom这本书并总结<br>4.html css的再抽空看看</p><p>嗯嗯嗯嗯！差不多就这样吧。哈哈，我觉着我应该去写小说，啥都没学到，但写起来，怎么感觉话那么多，全是与想要的所谓的技术层面没有关系的。嗯嗯，考虑尝试一下作家吧，董上春树？很棒。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>jquery和bootstrap一点小总结</title>
      <link href="/2018/05/27/jquery%E5%92%8Cbootstrap%E4%B8%80%E7%82%B9%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/27/jquery%E5%92%8Cbootstrap%E4%B8%80%E7%82%B9%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>最近两周感觉一直浑浑噩噩的，也不知道自己做了什么。总感觉现在的状态就是想得到的太多，而做的还太少。在学习的过程中，感绝总是有点急于求成，一切知识都毛毛躁躁的粗略过一次下，看起来似乎了解了好多，但自己终究还是最清楚自己到底学到东西没有（肯定是没有的）。</p><p>感觉博客就像是一个日记本，还可以倒倒自己的苦水，不说那么多了，还是想看看我最近在jquery和bootstrap的东西吧。</p><h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>JQuery是一个JavaScript库，我们要实现一些效果只需要直接引入这个库，然后根据规范使用，得到你想要的效果，这样就不需要我们写非常复杂的一堆代码去实现某个效果了。</p><p>JQuery我基是完完整整的看完并敲了一遍W3C中的示例代码，不过手册中好多的效果并没有一一的去实现。我觉着这些只要了解了他们具体的工作实现方法，剩下的只需要我们在要用到时再去查看手册就可以了（真的有点懒，关于这一点我也想有个过来人帮我提提建议）。</p><p>1.我觉着Jquery最重要的是去选取元素，我现在总结一下一些选择器的使用吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(*)                    //通配符选择器</span><br><span class="line">$(<span class="string">"#id"</span>)                //id选择器</span><br><span class="line">$(<span class="string">".class"</span>)             //class选择器</span><br><span class="line">$(<span class="string">"p"</span>)                  //选取p元素</span><br><span class="line">$(<span class="string">"p.intro"</span>)            //选取class等于intro的p元素</span><br><span class="line">$(<span class="string">"p#demo"</span>)             //选取所有 id=<span class="string">"demo"</span> 的 &lt;p&gt; 元素。</span><br><span class="line">$(<span class="string">"[href]"</span>)             //选取所有带有 href 属性的元素。</span><br><span class="line">$(<span class="string">"[href='#']"</span>)         //选取所有带有 href 值等于 <span class="string">"#"</span> 的元素。</span><br><span class="line">$(<span class="string">"[href!='#']"</span>)        //选取所有带有 href 值不等于 <span class="string">"#"</span> 的元素。</span><br><span class="line">$(<span class="string">"[href$='.jpg']"</span>)     //选取所有 href 值以 <span class="string">".jpg"</span> 结尾的元素。</span><br><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);  //css选择器</span><br></pre></td></tr></table></figure></p><p>2.对了，jQuery中不仅可以敲击按钮，任何被选定的度可以被点击，并响应事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).hide(1000);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>引入上面这段1代码，就可以实现敲击”p”的内容让其隐藏<br>上面代码的意思就是选取p元素，让其相应click事件，当点击后隐藏p元素的内容。<br>至于其他的事件的应用可以去jQuery手册查看，我就不一一列举了<br>3.还有层级选择器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"ancestor descendant"</span>)     //祖先后代选择器</span><br><span class="line">$(<span class="string">"parent&gt;child"</span>)            //父子选择器</span><br><span class="line">$(<span class="string">"prev+next"</span>)               //相邻元素选择器</span><br><span class="line">$(<span class="string">"prev+silings"</span>)            //兄弟选择器</span><br></pre></td></tr></table></figure></p><p>4.这里演示一个浅入浅出的效果代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;jQuery 效果 - 淡入淡出&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 0px auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .div1&#123;</span><br><span class="line">            height: 20px;</span><br><span class="line">            margin-top: 100px;</span><br><span class="line">background-color:grey;</span><br><span class="line">        &#125;</span><br><span class="line">        .div2&#123;</span><br><span class="line">            height: 400px;</span><br><span class="line">background-color:pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-3.3.1.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(document).ready(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            $(<span class="string">".div1"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                $(<span class="string">".div2"</span>).fadeToggle(2000);//淡入淡出切换，Toggle重要就是切换作用，//（2000）定义了该动作完成时间为2秒</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                $(<span class="string">".div2"</span>).stop();//停止动画</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button class=<span class="string">"button1"</span> style=<span class="string">"margin-left: 500px"</span>&gt;停止&lt;/button&gt;</span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt;点击这里，隐藏/显示面板&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">    &lt;p&gt;jQuery Fading 淡入淡出 方法&lt;/p&gt;</span><br><span class="line">    通过 jQuery，您可以实现元素的淡入淡出效果。</span><br><span class="line">    jQuery 拥有下面四种 fade 方法：</span><br><span class="line">    fadeIn()</span><br><span class="line">    fadeOut()</span><br><span class="line">    fadeToggle()</span><br><span class="line">    fadeTo()</span><br><span class="line">    &lt;p&gt;jQuery 滑动方法&lt;/p&gt;</span><br><span class="line">    通过 jQuery，您可以在元素上创建滑动效果。</span><br><span class="line">    jQuery 拥有以下滑动方法：</span><br><span class="line">    slideDown()</span><br><span class="line">    slideUp()</span><br><span class="line">    slideToggle()</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>5.动画animate效果<br>下面这段代码演示了使用动画的效果，并且我把其中的一些注意点也写入代码中间去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;jQuery 效果 - 动画&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        div&#123;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: <span class="comment">#00FFFF;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"jquery-3.3.1.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            $(<span class="string">"#start"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                var div = $(<span class="string">"div"</span>);           //迷惑   利用队列功能</span><br><span class="line">                div.animate(&#123;left:<span class="string">'300px'</span>, width:<span class="string">'200px'</span>,height:<span class="string">'200px'</span>&#125;,3000);</span><br><span class="line">                div.animate(&#123;fontSize:<span class="string">'3em'</span>, textAlign:<span class="string">"center"</span>&#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"#stop"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).stop();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">"#stop2"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).stop(<span class="literal">true</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">"#stop3"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).stop(<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;jQuery animate() - 使用队列功能&lt;br&gt;</span><br><span class="line">    默认地，jQuery 提供针对动画的队列功能。&lt;br&gt;</span><br><span class="line">    这意味着如果您在彼此之后编写多个 animate() 调用，jQuery 会创建包含这些方法调用的“内部”队列。然后逐一运行这些 animate 调用。&lt;br&gt;</span><br><span class="line">    jQuery stop() 方法&lt;br&gt;</span><br><span class="line">    jQuery stop() 方法用于停止动画或效果，在它们完成之前。&lt;br&gt;</span><br><span class="line">    stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。&lt;br&gt;</span><br><span class="line">    语法&lt;br&gt;</span><br><span class="line">    $(selector).stop(stopAll,goToEnd);&lt;br&gt;</span><br><span class="line">    可选的 stopAll 参数规定是否应该清除动画队列。默认是 <span class="literal">false</span>，即仅停止活动的动画，允许任何排入队列的动画向后执行。&lt;br&gt;</span><br><span class="line">    可选的 goToEnd 参数规定是否立即完成当前动画。默认是 <span class="literal">false</span>。&lt;br&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;b&gt;<span class="string">"开始"</span>&lt;/b&gt; 按钮会启动动画。&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;<span class="string">"停止"</span>&lt;/b&gt; 按钮会停止当前活动的动画，但允许已排队的动画向前执行。&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;<span class="string">"停止所有"</span>&lt;/b&gt; 按钮停止当前活动的动画，并清空动画队列；因此元素上的所有动画都会停止。&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;<span class="string">"停止但要完成"</span>&lt;/b&gt; 会立即完成当前活动的动画，然后停下来。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button id=<span class="string">"start"</span>&gt;开始&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">"stop"</span>&gt;停止&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">"stop2"</span>&gt;停止所有&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">"stop3"</span>&gt;停止但要完成&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt;</span><br><span class="line">    jquery</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>6.还要注意这个jQuery的callback函数<br>Callback 函数在当前动画 100% 完成之后执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  $(<span class="string">"p"</span>).hide(1000,<span class="function"><span class="title">function</span></span>()&#123;//该函数在hide动作完成后即开始执行</span><br><span class="line">    alert(<span class="string">"The paragraph is now hidden"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>最后关于jQuery，我只是了解了一点皮毛，至于去真正掌握它，那就需要去多练多写了，然后在这同时去完整的了解它的手册离得全部内容。</p><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h1><p>bootstrap这个框架用起来比jQuery需要特别注意的地方有很多，每个特殊的效果都有自己的特殊的引用词，但他们其中还是有规律的，每种效果用的都是特定的那些东西<br>看了它的一些教程，也跟着敲了一些代码，尝试了一些效果，但还没有记住，如果要再次用到时还是要去找手册，这点的总结，等再用的多点了再写一下吧</p><h1 id="下段时间的计划"><a href="#下段时间的计划" class="headerlink" title="下段时间的计划"></a>下段时间的计划</h1><p>1.昨天我正准备实际用一下这些天学到的东西，正在模仿写新浪的页面，准备接下来把这个页面写完，然后总结自己在这个过程中出现的问题，并是如何解决的。<br>2.借了JavaScript dom艺术编程这本书，接下来就学习这本书，把之前那些半知半解的知识点进一步的巩固<br><strong>归根到底就是一句话，复习复习再复习，不能像之前一样而遗漏了大多数的知识点。</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>js异常处理</title>
      <link href="/2018/05/13/js%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2018/05/13/js%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>我们一直在学JS，它如何处理异常的呢，在这里总结一下(其实也就是在网上看了一遍教程)。</p><p>try 语句测试代码块的错误。<br>catch 语句处理错误。<br>throw 语句创建自定义错误。</p><h1 id="错误一定会发生"><a href="#错误一定会发生" class="headerlink" title="错误一定会发生"></a>错误一定会发生</h1><p>当 JavaScript 引擎执行 JavaScript 代码时，会发生各种错误：<br>可能是语法错误，通常是程序员造成的编码错误或错别字。<br>可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。<br>可能是由于来自服务器或用户的错误输出而导致的错误。<br>当然，也可能是由于许多其他不可预知的因素。</p><h1 id="JavaScript-抛出错误"><a href="#JavaScript-抛出错误" class="headerlink" title="JavaScript 抛出错误"></a>JavaScript 抛出错误</h1><p>当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。<br>描述这种情况的技术术语是：<strong><em> JavaScript 将抛出一个错误 </em></strong></p><h1 id="JavaScript-测试和捕捉"><a href="#JavaScript-测试和捕捉" class="headerlink" title="JavaScript 测试和捕捉"></a>JavaScript 测试和捕捉</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">  // 这里运行代码</span><br><span class="line">&#125;</span><br><span class="line">catch（err）</span><br><span class="line">&#123;</span><br><span class="line">  // 这里处理错误</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建或抛出异常throw语句"><a href="#创建或抛出异常throw语句" class="headerlink" title="创建或抛出异常throw语句"></a>创建或抛出异常throw语句</h1><p>throw<strong><em>就是允许我们创建自定义错误</em></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throw exception</span><br></pre></td></tr></table></figure></p><h1 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            var x = document.getElementById(<span class="string">"demo"</span>).value;</span><br><span class="line">            <span class="keyword">if</span> (x==<span class="string">""</span>) throw <span class="string">"值为空"</span>;</span><br><span class="line">            <span class="keyword">if</span> (isNaN(x)) throw <span class="string">"不是数字"</span>;</span><br><span class="line">            <span class="keyword">if</span> (x&gt;10) throw <span class="string">"太大"</span>;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;5) throw  <span class="string">"太小"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (err) &#123;</span><br><span class="line">            var y=document.getElementById(<span class="string">"mess"</span>);</span><br><span class="line">            y.innerText=<span class="string">"错误："</span>+err+<span class="string">"。"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;h1&gt;使用throw语句抛出异常&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;请输入5--10之间的数字&lt;/p&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"demo"</span> &gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"myFunction()"</span> value=<span class="string">"测试输入值"</span>&gt;</span><br><span class="line">&lt;p id=<span class="string">"mess"</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>样例图片<br><img src="/img/2018-05-13_211336.png" alt="效果图"></p><h1 id="下步计划"><a href="#下步计划" class="headerlink" title="下步计划"></a>下步计划</h1><p>1.已经学习了一段时间的html css javascript的一些基本应用，但现在发现已经忘得差不多了，我计划接下来找一点相关的练习去熟悉它们的应用。<br>2.前几天借了一本js+jquery的书，再去试着学习一下jquery<br>3.一直想了解一下bootstrap，但一直没有去学习，现在把它写在这，估计就会抽时间去看了，强迫一下自己（不赶不上架）</p><p>好像计划的有点多了，那就花长点时间去学吧，也不知道具体内容有多少，先不定具体时间了。<br><em>==加油加油!!!<br>moneymoneymoney!!!(虽然很俗，但也是动力啊)<br>==</em></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>js实现的一点效果</title>
      <link href="/2018/05/08/js%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%95%88%E6%9E%9C/"/>
      <url>/2018/05/08/js%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>虽然最近在学习一些前端的东西，但一直没有头绪去如何使用，刚好听我们组长说有个升国旗的项目当时他也给我们展示了效果图(<a href="http://www.yunban.com/sjtu-flag/?tar_foid=fafbgVbOzDJqRGG9b16ajnOEN~qdLoVnrky1vAk7UGr2ICD1LPJ25no6f7RZt%40m8AVjmgIydkR8fIRLq9~BUsfltqkzSBqYUMGE6pHBT4arqOPv9CNslICbobPCWrj7dsbR2EOCtBxgHDFRAvMuTHdmff3k3eQYB7M8PL8Gj2b5ad4E" target="_blank" rel="noopener">http://www.yunban.com/sjtu-flag/?tar_foid=fafbgVbOzDJqRGG9b16ajnOEN~qdLoVnrky1vAk7UGr2ICD1LPJ25no6f7RZt%40m8AVjmgIydkR8fIRLq9~BUsfltqkzSBqYUMGE6pHBT4arqOPv9CNslICbobPCWrj7dsbR2EOCtBxgHDFRAvMuTHdmff3k3eQYB7M8PL8Gj2b5ad4E</a>)<br>他说可以练一下Js,刚好拿来试一下，虽然啥都不会。</p><h1 id="实现图片位置变化"><a href="#实现图片位置变化" class="headerlink" title="实现图片位置变化"></a>实现图片位置变化</h1><p>1.刚想到位置变换时想到了通过图片坐标去改变图片的位置，但具体做法不明白，在网上搜教程发现可以通过改变css样式里图片的top与left来改变位置。<br>（说来就很惭愧了，学了这么久的css居然没有用过（或者说是忘了）这两个属性，但是组长说时还真没好意思说自己不知道的，赶紧回来悄悄查一查）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#img&#123;</span></span><br><span class="line">   top:</span><br><span class="line">   left:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.既然位置可以招到属性可以改变了，但是升国旗要不断的去改变国旗的位置，这要怎么实现呢？<br>嗯！可以给它一个按钮去不断触发一个事件去改变这两个属性。但Js里如何去改css里的这些东西呢，我靠，难题又来了。找了好久发现可以获取其id来获得这一属性来改变（这个方法确实碰到过，单振峰不太会用啊）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var poLen=400px;</span><br><span class="line">var imgObj = document.getElementById(<span class="string">'img1'</span>);</span><br><span class="line">imgObj.style.top = poLen;   //但这个top值是个字符串</span><br><span class="line"> var polenInt = parseInt(poLen);   //要想让她位置改变，就要变化其数字部分，那我们就把它转化成数字 parseInt()</span><br><span class="line">            // alert(polenInt);测试用的，是否转化成功</span><br><span class="line">        <span class="keyword">if</span>(polenInt&gt;60) &#123;//判断国旗是否升到顶</span><br><span class="line">            polenInt = polenInt - 5;//每次升高5px</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            alert(<span class="string">"完成"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        poLen = (polenInt+<span class="string">'px'</span>).toString();//进过数字判断，还是要把它变成字符串去处理改变国旗位置</span><br></pre></td></tr></table></figure></p><p>3.现在这个国旗位置可以改变了，但要能去不断触发这个事件啊。嗯！按钮最熟悉了，那就通过不断按钮去触发这个事件把。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"startRise()"</span> value=<span class="string">"升旗"</span> style=<span class="string">"margin-left: 100px"</span>&gt;</span><br><span class="line">//那就把上面那个事件包装成一个函数吧，让按钮去触发，那就起名startRise()。卧槽，名字很有水品啊</span><br></pre></td></tr></table></figure></p><p>4.剩下还剩一个旗杆啊，这个。。嗯。。。我画画天赋那么高，那就画一个旗杆加旗台的图片吧<br><img src="/img/flag.gif" alt="旗杆"></p><p>那就升旗这段算是完成了！</p><h1 id="对了还要有国歌啊"><a href="#对了还要有国歌啊" class="headerlink" title="对了还要有国歌啊"></a>对了还要有国歌啊</h1><p>1.添加背景音乐啊，这个似乎好做啊，H5里讲了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=<span class="string">"guoge2.mp3"</span> id=<span class="string">"aa"</span> controls=<span class="string">"controls"</span> loop=<span class="string">"false"</span> &gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p><p>2.但有个播放器样式似乎很不雅观啊，那我们就想办法把它藏起来，也通过一个和升国旗对应的按钮来控制(那就先在audio里面加一分hidden)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var songObj = document.getElementById(<span class="string">'aa'</span>);</span><br><span class="line"><span class="keyword">if</span> (songObj.paused)</span><br><span class="line">   &#123;</span><br><span class="line">       songObj.play();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   songObj.pause();</span><br></pre></td></tr></table></figure></p><p>3.同样还是把控制歌曲部分用函数包起来，用一个按钮来控制，这样就实现了背景音乐的控制了</p><h1 id="卧槽，好像还有两个进度条来展示歌曲和升国旗的进度"><a href="#卧槽，好像还有两个进度条来展示歌曲和升国旗的进度" class="headerlink" title="卧槽，好像还有两个进度条来展示歌曲和升国旗的进度"></a>卧槽，好像还有两个进度条来展示歌曲和升国旗的进度</h1><p>网上搜到了一段代码，我们现在来解读一下吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;进度条&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        .processcontainer&#123;</span><br><span class="line">            width:450px;</span><br><span class="line">            border:1px solid <span class="comment">#6C9C2C;</span></span><br><span class="line">            height:25px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#processbar&#123;</span></span><br><span class="line">            background:<span class="comment">#95CA0D;</span></span><br><span class="line">            <span class="built_in">float</span>:left;</span><br><span class="line">            height:100%;</span><br><span class="line">            text-align:center;</span><br><span class="line">            line-height:150%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">setProcess</span></span>()&#123;//改变进度条的长度</span><br><span class="line">            var processbar = document.getElementById(<span class="string">"processbar"</span>);</span><br><span class="line">            processbar.style.width = parseInt(processbar.style.width) + 1 + <span class="string">"%"</span>;</span><br><span class="line">            processbar.innerHTML = processbar.style.width;//在进度框内显示进度  百分之几</span><br><span class="line">            <span class="keyword">if</span>(processbar.style.width == <span class="string">"100%"</span>)&#123;</span><br><span class="line">                window.clearInterval(bartimer);//当进度满了，停止触发</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var bartimer = window.setInterval(<span class="function"><span class="title">function</span></span>()&#123;setProcess();&#125;,100);//通过这个函数来不断触发这个函数</span><br><span class="line">        window.onload = <span class="function"><span class="title">function</span></span>()&#123;//页面打开进度条就开始走</span><br><span class="line">            bartimer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">"processcontainer"</span>&gt;//包进度的那个框</span><br><span class="line">    &lt;div id=<span class="string">"processbar"</span> style=<span class="string">"width:0%;"</span>&gt;&lt;/div&gt;//显示进度</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h1 id="把上面的代码糅合一下，大体效果就可以出来了"><a href="#把上面的代码糅合一下，大体效果就可以出来了" class="headerlink" title="把上面的代码糅合一下，大体效果就可以出来了"></a>把上面的代码糅合一下，大体效果就可以出来了</h1><p>1.代码部分<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;图片位置变换&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        <span class="comment">#img1&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 412px;</span><br><span class="line">            left: 536px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#img2&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 400px;</span><br><span class="line">            top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        audio&#123;</span><br><span class="line">            <span class="built_in">float</span>: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">          .processcontainer&#123;</span><br><span class="line">              width:5px;</span><br><span class="line">              border:1px solid <span class="comment">#6C9C2C;</span></span><br><span class="line">              height:450px;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">#processbar&#123;</span></span><br><span class="line">            background:<span class="comment">#95CA0D;</span></span><br><span class="line">            <span class="built_in">float</span>:right;</span><br><span class="line">            width:100%;</span><br><span class="line">            /*text-align:center;*/</span><br><span class="line">            /*!*line-height:150%;*!*/</span><br><span class="line">        &#125;</span><br><span class="line">        .processcontainer&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 25px;</span><br><span class="line">            left: 380px;</span><br><span class="line">        &#125;</span><br><span class="line">        .flagcontainer&#123;</span><br><span class="line">            width:5px;</span><br><span class="line">            border:1px solid red;</span><br><span class="line">            height:450px;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#flagbar&#123;</span></span><br><span class="line">            background:red;</span><br><span class="line">            <span class="built_in">float</span>:right;</span><br><span class="line">            width:100%;</span><br><span class="line">            /*text-align:center;*/</span><br><span class="line">            /*!*line-height:150%;*!*/</span><br><span class="line">        &#125;</span><br><span class="line">        .flagcontainer&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 25px;</span><br><span class="line">            left: 370px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--国歌进度条--&gt;</span><br><span class="line">&lt;div class=<span class="string">"processcontainer"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"processbar"</span> style=<span class="string">"height:100%;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--国旗进度条--&gt;</span><br><span class="line">&lt;div class=<span class="string">"flagcontainer"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"flagbar"</span> style=<span class="string">"height:100%;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--升旗部分--&gt;</span><br><span class="line">&lt;img id=<span class="string">"img2"</span> src=<span class="string">"end.png"</span>&gt;</span><br><span class="line">&lt;img id=<span class="string">"img1"</span> src=<span class="string">"flag.gif"</span> &gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"startRise()"</span> value=<span class="string">"变化"</span> style=<span class="string">"margin-left: 100px"</span>&gt;</span><br><span class="line">&lt;audio src=<span class="string">"guoge2.mp3"</span> id=<span class="string">"aa"</span> controls=<span class="string">"controls"</span> loop=<span class="string">"false"</span> hidden&gt;&lt;/audio&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> onclick=<span class="string">"fangGe()"</span> value=<span class="string">"控制音乐"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var count = 0;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">fangGe</span></span>() &#123;</span><br><span class="line">        var songObj = document.getElementById(<span class="string">'aa'</span>);</span><br><span class="line">        // songObj.currentTime;//播放进度</span><br><span class="line">        // songObj.duration;//播放时间</span><br><span class="line"></span><br><span class="line">        //进度条控制</span><br><span class="line">        count = count + 1;</span><br><span class="line">        var bartimer = window.setInterval(<span class="function"><span class="title">function</span></span>()&#123;setProcess();&#125;,480);</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">setProcess</span></span>()&#123;</span><br><span class="line">            var processbar = document.getElementById(<span class="string">"processbar"</span>);</span><br><span class="line">            <span class="keyword">if</span>(count%2==1)</span><br><span class="line">            &#123;</span><br><span class="line">                processbar.style.height = parseFloat(processbar.style.height) - 0.5 + <span class="string">"%"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            // processbar.style.width = parseInt(processbar.style.width) + 1 + <span class="string">"%"</span>;</span><br><span class="line"></span><br><span class="line">            //processbar.innerHTML = processbar.style.width;显示进度</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(processbar.style.height == <span class="string">"0%"</span>)&#123;</span><br><span class="line">                window.clearInterval(bartimer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //歌曲控制</span><br><span class="line">        <span class="keyword">if</span> (songObj.paused)</span><br><span class="line">        &#123;</span><br><span class="line">            songObj.play();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            songObj.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">startRise</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        //进度条控制</span><br><span class="line">            var flagbar = document.getElementById(<span class="string">"flagbar"</span>);</span><br><span class="line">            var flagfloat = parseFloat(flagbar.style.height)</span><br><span class="line">        <span class="keyword">if</span>(flagfloat&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            flagbar.style.height = flagfloat - 1.52 + <span class="string">"%"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            flagbar.style.height = <span class="string">"0%"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var poLen = <span class="string">'400px'</span>;</span><br><span class="line">        var imgObj = document.getElementById(<span class="string">'img1'</span>);</span><br><span class="line">        imgObj.style.top = poLen;</span><br><span class="line">        var polenInt = parseInt(poLen);</span><br><span class="line">            // alert(polenInt);</span><br><span class="line">        <span class="keyword">if</span>(polenInt&gt;60) &#123;</span><br><span class="line">            polenInt = polenInt - 5;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            alert(<span class="string">"完成"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        poLen = (polenInt+<span class="string">'px'</span>).toString();</span><br><span class="line">        //alert(poLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>2.开始效果图<br><img src="/img/2018-05-08_223714.png" alt="效果图"><br>3.结束效果图<br><img src="/img/2018-05-08_224312.png" alt="效果图"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>summary</title>
      <link href="/2018/04/26/summary/"/>
      <url>/2018/04/26/summary/</url>
      <content type="html"><![CDATA[<h1 id="大体总结"><a href="#大体总结" class="headerlink" title="大体总结"></a>大体总结</h1><p><strong><em>第一部分 git的基本使用</em></strong><br>1.git教程<br>网址：(<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/</a>)<br>2.具体内容：<br>（1）Windows上安装git<br>（2）创建版本库<br>（3）版本回退<br>（4）工作区和暂存区<br>（5）管理修改<br>（6）撤销删除<br>（7）删除文件<br>（8）建远程仓库，把本地仓库与远程仓库连接起来</p><p><strong><em>第二部分 github的基础使用</em></strong><br>github的具体操作还未熟悉，只是了解一点简单的远程仓库的概念，看了一些身边同学的gtihub账号</p><p><strong><em>第三部分 使用hexo+github搭建属于自己的博客</em></strong><br>这个搭建完全是按照网上的3步骤一步一步做的<br>网址：(<a href="https://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">https://www.jianshu.com/p/465830080ea9</a>)</p><p><strong><em>第四部分 PS</em></strong><br>我们前端组组长在昨天的值班时给我们讲了一些ps在前端里经常用到的一些功能，自己也准备在接下来的时间里自学一些ps的操作</p><p><strong><em>今晚有点仓促，在做上面这些东西时遇到的文体与解决方法我会在接下来的五一假期里具体列出</em></strong></p><h1 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h1><h2 id="windows上安装git"><a href="#windows上安装git" class="headerlink" title="windows上安装git"></a>windows上安装git</h2><ol><li><a href="https://git-scm.com/downloads" title="git下载" target="_blank" rel="noopener">git下载</a></li><li>安装完成后，在开始菜单里找到git bash，若出现下面图片一样的内容，说明安装成功</li><li><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907073134ef6feff559cf4ce3a2c5c588d2831c0a000/0" alt="安装成功后" title="安装成功后"></li><li>然后在命令行输入代码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"eamil@example.com"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建一个版本库repository"><a href="#创建一个版本库repository" class="headerlink" title="创建一个版本库repository"></a>创建一个版本库repository</h2><ol><li><p>首先要注意你要把版本库建在哪里，就在哪个文件下打开git bash：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir newre</span><br><span class="line">$ <span class="built_in">cd</span> newre</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">显示所建版本库的位置</span><br></pre></td></tr></table></figure></li><li><p>然后通过git init把这个目录变成git可以管理的仓库：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>此时你就会发现该目录下回出现一个 .git 的目录，这就是用来跟踪管理版本库的，如果没有看到，可以打开隐藏文件就可以看到了</p></li></ol><p>下面开始尝试王版本库里写文件</p><ol start="4"><li>在learngit文件夹下新建一个txt文档，例如:new.txt,并写入内容</li><li><p>用命令把该文档添加到仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add new.txt</span><br></pre></td></tr></table></figure></li><li><p>用命令告诉git，把文件交到仓库：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"备注此次变动，以便自己以后更清楚每次改动"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ol><li>git status查看当前仓库状态</li><li>git diff查看不同，可以看出我们对文档做的修改</li><li>修改后把它再一次提交到仓库 git add new.txt；然后可以通过git status查看要被提交的文档所做的修改，然后git commit -m “….”提交。</li><li>git log 可以查看该文件坐了什么修改</li><li>回退到当前的上一版本 git reset –hard HEAD^;然后可以用cat new.txt查看当前文件内容；git reset–hard “commit id”也可以回到未来某一版本，commit id 要在可以在前面的git status里查看</li><li>git reflog可以查看记录的你的每一次命令。</li></ol><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><ol><li>图1：<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0" alt="示意图"></li><li>再git add 一个文本文件<br>图2：<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0" alt="示意图"><br>所以，git add命令实际上就是把所要提交的文件放在了暂存区(Stage)，然后，执行git commit 就可以一次性把暂存区的所有修改提交到分支。</li><li>git commit后版本库就变成了这样，暂存区就没有任何内容了<br>图3；<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0" alt="示意图">。</li></ol><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><ol><li>git管理的是修改不是文件。</li></ol><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<br>git checkout – file</li><li>当你不仅改乱了工作区某个文件的内容，还添加到了暂存区时，想要丢弃修改，分两步，git reset HEAD file，会带第一种情况，然后按第一种情况处理</li><li>已将提交了不合适的修改到版本库，想要撤销本次提交，就要版本回退，前提是没有推送到远程库。</li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ol><li>一般可以直接从文件管理器中把没用的文件删了，或者用rm命令删了 $ rm file,这个时候工作区和版本库就不一样了，git status会告诉你哪些文件被删了。</li><li><p>如果要从版本库也删除，则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(假设此前新建了一个test.txt文本文件）</span><br><span class="line"></span><br><span class="line">$ git rm test.txt</span><br><span class="line">rm <span class="string">'tesrt.txt'</span></span><br><span class="line">$ git commit -m <span class="string">"备注"</span></span><br></pre></td></tr></table></figure></li><li><p>如果删错了，天文版本库还有，所以可以轻松的恢复最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></li></ol><p>git checkout 其实就是用版本库里的版本替换工作区的版本，无论工作区是删除还是修改，都可以一键还原。</p><h2 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h2><p>1.创建SSH KEY<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></p><p>（一路回车，如果不出什么问题）<br>然后在用户主目录下会生成一个.ssh文件夹，里面会有私钥id_rsa和公钥id_rsa.pub两个文件<br>2.登录github账号<br><img src="/img/sshkey.png" alt="添加公钥"><br>在上图处添加公钥</p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>1.如何把本地库与github上的远程库连接起来？（让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。）<br>2.先在github上建立一个仓库<br>3.在本地库下打开git bash输入下面代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:dong973711/learngit.git</span><br></pre></td></tr></table></figure></p><p>4.添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>推送到github仓库</p><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><h2 id="注册一个github账号"><a href="#注册一个github账号" class="headerlink" title="注册一个github账号"></a>注册一个github账号</h2><p>1.点击进入github网址(<a href="https://github.com/github)然后根据步骤注册一个账号，很简单的。" target="_blank" rel="noopener">https://github.com/github)然后根据步骤注册一个账号，很简单的。</a><br>2.github远程库和git下的本地仓库连接方式在上一节git教程里已有说明。<br>3.至于将项目部署到github的方法将在下面的搭建博客里提到。</p><h1 id="用hexo-github搭建自己的博客"><a href="#用hexo-github搭建自己的博客" class="headerlink" title="用hexo+github搭建自己的博客"></a>用hexo+github搭建自己的博客</h1><h2 id="安装node-js和配置好node-js环境"><a href="#安装node-js和配置好node-js环境" class="headerlink" title="安装node.js和配置好node.js环境"></a>安装node.js和配置好node.js环境</h2><p>安装配置完成后可以在命令行里检查是否成功<br><img src="/img/node.png" alt="检查Node.js"></p><h2 id="安装配置git"><a href="#安装配置git" class="headerlink" title="安装配置git"></a>安装配置git</h2><p>1.在前面git的学习里已经说明<br><img src="/img/git.png" alt="检查git"></p><h2 id="github的相关操作"><a href="#github的相关操作" class="headerlink" title="github的相关操作"></a>github的相关操作</h2><p>1.首先你要拥有一个github账号，前面已说明，自己往上回滚。。。同时看看如何新建一个仓库<br>2.建一个仓库，但要以你的github账号名来命名：账户名.github.io  （必须）<br><img src="/img/dong973711.png" alt="dong973711"><br>记得勾选Initialize this repository with a README<br>3.然后在这个仓库下点setting按钮，在github pages页上会看到一个网址，现在该项目已经被配置到网络上了，用该网址即可访问<br><img src="/img/githubpages.png" alt="githubpages"></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>1.Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行（blog文件夹尽量建在飞系统盘内，因为后面初始化命令时会出错，或者可以在初始化的时候在非系统盘内重建一个文件夹初始化）<br>2.在blog文件夹下打开git bash(或者用cmd也可以，不过要进入相应的路径)，运行下面指令安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>3.安装完成后初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>下面依次执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>复制localhost:4000，在浏览器打开即可在本地查看<br>4.截下来我们就要把hexo与github起来<br>打开blog根目录下的_config.yml文件并该最下面部分内容，如下图：<br><img src="/img/configyml.png" alt="关联hexo和github"><br>deploy:<br>   type: git<br>   repo: git<br>   branch: master<br>5.保存站点配属文件<br>安装git部署插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>接着依次输入下面三条指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>现在就可以用:你的名字.github.io  .就可以通过网络浏览你的博客了。<br>6.现在来介绍常用的Hexo 命令</p><p>npm install hexo -g     #安装Hexo<br>npm update hexo -g    #升级<br>hexo init    #初始化博客</p><p>命令简写<br>hexo n  “我的博客” == hexo new  “我的博客”   #新建文章<br>hexo g == hexo generate   #生成<br>hexo s == hexo server   #启动服务预览<br>hexo d == hexo deploy   #部署</p><p>hexo server     #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s    #静态模式<br>hexo server -p 5000     #更改端口<br>hexo server -i 192.168.1.1     #自定义 IP<br>hexo clean     #清除缓存，若是网页正常情况下可以忽略这条命令</p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>first</title>
      <link href="/2018/04/18/first/"/>
      <url>/2018/04/18/first/</url>
      <content type="html"><![CDATA[<p>第一次，也不知道发什么东西，就是单纯看看发个博文是怎么样的</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/15/hello-world/"/>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
